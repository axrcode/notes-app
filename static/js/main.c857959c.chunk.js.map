{"version":3,"sources":["components/TaskContext.js","components/useLocalStorage.js","components/TaskCounter.js","components/TaskSearch.js","components/TaskList.js","components/TaskItem.js","components/TaskForm.js","components/CreateTaskButton.js","components/Modal.js","components/AppUI.js","App.js","index.js"],"names":["TaskContext","React","createContext","TaskProvider","props","itemName","initialValue","useState","loading","setLoading","error","setError","items","setItem","useEffect","setTimeout","parsedItem","localStorageItem","localStorage","getItem","JSON","parse","stringify","saveChangeItem","newItem","stringifiedItem","useLocalStorage","tasks","saveChangeTasks","searchValue","setSearchValue","openModal","setOpenModal","completedTask","filter","task","completed","length","totalTasks","searchedTasks","taskText","text","toLowerCase","searchText","includes","Provider","value","addTask","newTasks","push","completeTask","taskIndex","findIndex","deleteTask","splice","children","TaskCounter","useContext","className","TaskSearch","type","placeholder","onChange","msg","console","log","target","TaskList","TaskItem","onClick","onComplete","onDelete","TaskForm","newTaskValue","setNewTaskValue","onSubmit","event","preventDefault","class","rows","CreateTaskButton","Modal","ReactDOM","createPortal","document","getElementById","AppUI","map","App","render"],"mappings":"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","file":"static/js/main.c857959c.chunk.js","sourcesContent":["import React from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\nconst TaskContext = React.createContext();\n\nfunction TaskProvider(props) {\n\n    /**\n     *  Declaración de los state para: \n     *  - Obtener las tareas (tasks)\n     *  - Valor de busqueda (searchValue)\n     */\n    const { \n        items: tasks, \n        saveChangeItem: saveChangeTasks, \n        loading,\n        error\n    } =  useLocalStorage( 'Task_v1', [] );\n    const [ searchValue, setSearchValue ] = React.useState( '' );\n\n    const [ openModal, setOpenModal ] = React.useState(false);\n\n    /**\n     *  Variables para procesos utilizando el state: \n     *  - Filtrar tasks completados\n     *  - Total de task almacenados\n     */\n    const completedTask = tasks.filter(task => !!task.completed).length;\n    const totalTasks = tasks.length;\n\n    /**\n     *  Array vacio para ir filtrando los tasks que coincidan con la búsqueda.\n     *  Condición para saber si la valor de búsqueda esta vació o contiene datos\n     */\n    let searchedTasks = [];\n\n    if ( !searchValue.length > 0 ) {\n        /**\n         *  Devuelve todas las tareas\n         */\n        searchedTasks = tasks;\n    } else { \n        /**\n         *  Convierte el text de los tasks y el contenido del state de búsqueda en minúscula,\n         *  para forzar la coincidencia de los datos.\n         *  Verificar si el text del task contiene en algo del valor de búsqueda (return)\n         */\n        searchedTasks = tasks.filter(task => {\n        const taskText = task.text.toLowerCase();\n        const searchText = searchValue.toLowerCase();\n        return taskText.includes(searchText);\n        });\n    } \n\n    /**\n     *  Operaciones para marcar como completada una tarea o eliminarla\n     *  - La función saveChangeTasks() se obtiene del Custom Hook 'useLocalStorage()'\n     */\n    const addTask = (text) => {\n        const newTasks = [...tasks];\n        //  Crear una nueva tarea\n        newTasks.push({\n            completed: false,\n            text,\n        });\n        saveChangeTasks(newTasks);\n    }\n\n    const completeTask = (text) => {\n        const taskIndex = tasks.findIndex(task => task.text === text);\n        const newTasks = [...tasks];\n        //  Cambiar el valor de la propiedad completed de la tarea\n        newTasks[taskIndex].completed = true;\n        saveChangeTasks(newTasks);\n    }\n\n    const deleteTask = (text) => {\n        const taskIndex = tasks.findIndex(task => task.text === text);\n        const newTasks = [...tasks];\n        //  Eliminar el elemento seleccionado\n        newTasks.splice(taskIndex, 1);\n        saveChangeTasks(newTasks);\n    }\n\n    return (\n        <TaskContext.Provider value={{\n            loading,\n            error,\n            totalTasks,\n            completedTask,\n            searchValue,\n            setSearchValue,\n            searchedTasks,\n            addTask,\n            completeTask,\n            deleteTask,\n            openModal,\n            setOpenModal,\n        }}>\n            {props.children}\n        </TaskContext.Provider>\n    );\n}\n\nexport { TaskContext, TaskProvider };","import React from 'react';\n\nfunction useLocalStorage( itemName, initialValue ) {\n  \n    const [loading, setLoading] = React.useState(true);\n    const [error, setError] = React.useState(false);\n  \n    const [ items, setItem ] = React.useState( initialValue );\n  \n    React.useEffect(() => {\n      setTimeout(() => {\n  \n        try {\n          //  CambiarLLamamos el item \"Task_v1\" de nuestro localStorage \n          const localStorageItem = localStorage.getItem( itemName);\n          //  Variable que almacenará las tareas\n          let parsedItem;\n  \n          if ( !localStorageItem ) {\n            localStorage.setItem( itemName, JSON.stringify( initialValue ) );\n            parsedItem = initialValue;\n          } else {\n            parsedItem = JSON.parse( localStorageItem );\n          }\n  \n          setItem(parsedItem);\n          setLoading(false);\n        } catch (error) {\n          setError(error);\n        }\n  \n      }, 1500);\n    }, [itemName, initialValue]);\n  \n    /**\n     * Función para poder modificar los valos en el localStorage\n     * - Se utiliza el item \"Task_v1\" para los valores\n     */\n    const saveChangeItem = ( newItem ) => {\n      try {\n        const stringifiedItem = JSON.stringify( newItem );\n        localStorage.setItem( itemName, stringifiedItem );\n        setItem(newItem);\n      } catch (error) {\n        setError(error);\n      }\n    }\n  \n    return { items, saveChangeItem, loading, error };\n}\n\nexport { useLocalStorage };","import React, {Fragment} from 'react';\nimport { TaskContext } from './TaskContext';\n\nfunction TaskCounter() {\n\n    const { totalTasks, completedTask } = React.useContext(TaskContext);\n\n    return(\n        <Fragment>\n            <h2 className=\"task-counter text-center\">\n                Has completado { completedTask } de { totalTasks } tareas\n            </h2>\n        </Fragment>\n    );\n}\n\nexport {TaskCounter};","import React, {Fragment} from 'react';\nimport { TaskContext } from './TaskContext';\n\nfunction TaskSearch() {\n\n    const { searchValue, setSearchValue } = React.useContext(TaskContext);\n\n    /**\n     *  Función para obtener el contenido ingresado por el usuario en el input.\n     *  Através de los props, conecta con el state del archivo App.js \n     */\n    const onSearchValueChanged = (msg) => \n    {\n        console.log('Buscando: ' + msg.target.value);\n        setSearchValue(msg.target.value);\n    }\n\n    return (\n        <Fragment>\n            <input \n                className=\"form-control form-control-lg\" \n                type=\"search\" \n                placeholder=\"Buscar una tarea...\" \n                value={ searchValue }\n                onChange={ onSearchValueChanged } \n            />\n        </Fragment>\n    );\n}\n\nexport {TaskSearch};","import React, {Fragment} from 'react';\n\nfunction TaskList( props ) {\n    return(\n        <Fragment>\n            <section>\n                <ul>\n                    { props.children }\n                </ul>\n            </section>\n        </Fragment>\n    );\n}\n\nexport {TaskList};","import React, {Fragment} from 'react';\n\nfunction TaskItem( props ) {\n\n    return(\n        <Fragment>\n            <li className=\"task-item bg-light text-dark\">\n                <span \n                    className={`icon icon-check ${props.completed && 'icon-check-active'}`}\n                    onClick={props.onComplete}\n                >\n                    <i className=\"fas fa-check-circle\"></i>\n                </span>\n\n                <p className={`${props.completed && 'task-item-completed'}`}>\n                    { props.text }\n                </p>\n\n                <span \n                    className=\"icon icon-delete\"\n                    onClick={props.onDelete}\n                >\n                    <i className=\"fas fa-trash\"></i>\n                </span>\n            </li>\n        </Fragment>\n    );\n}\n\nexport {TaskItem};","import React from 'react';\nimport { TaskContext } from './TaskContext';\n\nfunction TaskForm() {\n\n    const [ newTaskValue, setNewTaskValue ] =  React.useState('');\n\n    const {\n        addTask,\n        setOpenModal,\n    } = React.useContext(TaskContext);\n\n    const onChange = (event) => {\n        setNewTaskValue(event.target.value) \n    };\n\n    const onCancel = () => {\n        setOpenModal(false);\n    };\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        addTask(newTaskValue);\n        setOpenModal(false);\n    };\n\n    return (\n        <div className=\"row w-100\">\n            <div className=\"col-md-4 offset-md-4\">\n                <form onSubmit={onSubmit}>\n                    <div class=\"card bg-light text-dark\">\n                        <div class=\"card-body\">\n\n                            <div class=\"form-group\">\n                                <label className=\"font-weight-bold\">Ingresa una nueva tarea</label>\n                                <textarea \n                                    value={newTaskValue}\n                                    onChange={onChange}\n                                    class=\"form-control\"\n                                    rows=\"3\"\n                                ></textarea>\n                            </div>\n\n                            <div className=\"row mt-5\">\n                                <div className=\"col-6 pr-1\">\n                                    <button\n                                        className=\"btn btn-white btn-block btn-sm pr-0\"\n                                        type=\"button\"\n                                        onClick={onCancel}\n                                    >\n                                        Cancelar\n                                    </button>\n                                </div>\n                                <div className=\"col-6 pl-1\">\n                                    <button\n                                        className=\"btn btn-success btn-block btn-sm pl-0\"\n                                        type=\"submit\"\n                                    >\n                                        Crear\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport { TaskForm };","import React, {Fragment} from 'react';\nimport { TaskContext } from './TaskContext';\n\nfunction CreateTaskButton(props) {\n\n    const { openModal } = React.useContext(TaskContext);\n\n    const onClickButton = () => \n    {\n        props.setOpenModal( !openModal );\n    };\n\n    return(\n        <Fragment>\n            <button \n                className=\"create-task-button bg-primary\"\n                onClick={ onClickButton }\n            >    \n                <i className=\"fas fa-plus\"></i>\n            </button>\n        </Fragment>\n    );\n}\n\nexport {CreateTaskButton};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Modal({ children }) {\n    return ReactDOM.createPortal(\n        <div className=\"modal\">\n            { children }\n        </div>,\n        document.getElementById('modal')\n    );\n}\n\nexport { Modal };","import React, {Fragment} from 'react';\n\nimport { TaskContext } from './TaskContext';\n\nimport { TaskCounter } from './TaskCounter';\nimport { TaskSearch } from './TaskSearch';\nimport { TaskList } from './TaskList';\nimport { TaskItem } from './TaskItem';\nimport { TaskForm } from './TaskForm';\nimport { CreateTaskButton } from './CreateTaskButton';\n\nimport { Modal } from './Modal';\n\nfunction AppUI() {\n\n    const {\n        error,\n        loading,\n        searchedTasks,\n        completeTask,\n        deleteTask, \n        openModal,\n        setOpenModal,                \n    } = React.useContext(TaskContext);\n\n    return (\n        <Fragment>\n            <div className=\"container\">\n                <TaskCounter />\n\n                <TaskSearch />\n\n                <TaskList>\n                    { error && <p>Hubo un error...</p> }\n                    { loading && <p>Estamos cargando...</p> }\n                    { (!loading && !searchedTasks.length) && <p>Crear primer tarea...</p> }\n                \n                    {\n                        searchedTasks.map(task => (\n                            <TaskItem \n                            key={task.text} \n                            text={task.text} \n                            completed={task.completed}\n                            onComplete={() => completeTask(task.text)}\n                            onDelete={() => deleteTask(task.text)}\n                            />\n                        ))\n                    }\n                </TaskList>\n\n                { !!openModal && (\n                    <Modal>\n                        <TaskForm />\n                    </Modal>\n                ) }\n\n                <CreateTaskButton \n                    setOpenModal={setOpenModal}\n                />\n            </div>\n        </Fragment>\n    );\n}\n\nexport { AppUI };","import React from 'react';\nimport { TaskProvider } from './components/TaskContext';\nimport { AppUI } from './components/AppUI';\n\nimport './css/styles.css';\n\nfunction App() {\n  return (\n    <TaskProvider>\n      <AppUI />\n    </TaskProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}